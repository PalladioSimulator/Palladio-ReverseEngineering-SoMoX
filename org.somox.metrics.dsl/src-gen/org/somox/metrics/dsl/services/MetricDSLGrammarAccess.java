/*
* generated by Xtext
*/
package org.somox.metrics.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MetricDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MetricModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetricModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cImportURIAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_0_1_0 = (RuleCall)cImportURIAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExternKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMetricsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMetricsExternalMetricParserRuleCall_1_1_0 = (RuleCall)cMetricsAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cMetricsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMetricsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMetricsInternalMetricParserRuleCall_4_0 = (RuleCall)cMetricsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MetricModel:
		//	("import" importURI+=STRING ";")* ("extern" metrics+=ExternalMetric ";")* "Metrics" "{" metrics+=InternalMetric+ "}";
		public ParserRule getRule() { return rule; }

		//("import" importURI+=STRING ";")* ("extern" metrics+=ExternalMetric ";")* "Metrics" "{" metrics+=InternalMetric+ "}"
		public Group getGroup() { return cGroup; }

		//("import" importURI+=STRING ";")*
		public Group getGroup_0() { return cGroup_0; }

		//"import"
		public Keyword getImportKeyword_0_0() { return cImportKeyword_0_0; }

		//importURI+=STRING
		public Assignment getImportURIAssignment_0_1() { return cImportURIAssignment_0_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_0_1_0() { return cImportURISTRINGTerminalRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//("extern" metrics+=ExternalMetric ";")*
		public Group getGroup_1() { return cGroup_1; }

		//"extern"
		public Keyword getExternKeyword_1_0() { return cExternKeyword_1_0; }

		//metrics+=ExternalMetric
		public Assignment getMetricsAssignment_1_1() { return cMetricsAssignment_1_1; }

		//ExternalMetric
		public RuleCall getMetricsExternalMetricParserRuleCall_1_1_0() { return cMetricsExternalMetricParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }

		//"Metrics"
		public Keyword getMetricsKeyword_2() { return cMetricsKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//metrics+=InternalMetric+
		public Assignment getMetricsAssignment_4() { return cMetricsAssignment_4; }

		//InternalMetric
		public RuleCall getMetricsInternalMetricParserRuleCall_4_0() { return cMetricsInternalMetricParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class MetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Metric");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExternalMetricParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInternalMetricParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Metric:
		//	ExternalMetric | InternalMetric;
		public ParserRule getRule() { return rule; }

		//ExternalMetric | InternalMetric
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExternalMetric
		public RuleCall getExternalMetricParserRuleCall_0() { return cExternalMetricParserRuleCall_0; }

		//InternalMetric
		public RuleCall getInternalMetricParserRuleCall_1() { return cInternalMetricParserRuleCall_1; }
	}

	public class ExternalMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalMetric");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameMYIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ExternalMetric:
		//	name=MYID;
		public ParserRule getRule() { return rule; }

		//name=MYID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//MYID
		public RuleCall getNameMYIDParserRuleCall_0() { return cNameMYIDParserRuleCall_0; }
	}

	public class InternalMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetricKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMYIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cShortNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cShortNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cShortNameAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cParametersKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cParameterAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cParameterNumberParserRuleCall_8_2_0 = (RuleCall)cParameterAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Assignment cDefinitionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDefinitionMetricDefinitionParserRuleCall_9_0 = (RuleCall)cDefinitionAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//InternalMetric:
		//	"Metric" name=MYID "(" shortName=STRING "," description=STRING ")" "{" ("parameters" "{" parameter+=Number* "}")?
		//	definition=MetricDefinition "};";
		public ParserRule getRule() { return rule; }

		//"Metric" name=MYID "(" shortName=STRING "," description=STRING ")" "{" ("parameters" "{" parameter+=Number* "}")?
		//definition=MetricDefinition "};"
		public Group getGroup() { return cGroup; }

		//"Metric"
		public Keyword getMetricKeyword_0() { return cMetricKeyword_0; }

		//name=MYID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//MYID
		public RuleCall getNameMYIDParserRuleCall_1_0() { return cNameMYIDParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//shortName=STRING
		public Assignment getShortNameAssignment_3() { return cShortNameAssignment_3; }

		//STRING
		public RuleCall getShortNameSTRINGTerminalRuleCall_3_0() { return cShortNameSTRINGTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//description=STRING
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0() { return cDescriptionSTRINGTerminalRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//("parameters" "{" parameter+=Number* "}")?
		public Group getGroup_8() { return cGroup_8; }

		//"parameters"
		public Keyword getParametersKeyword_8_0() { return cParametersKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//parameter+=Number*
		public Assignment getParameterAssignment_8_2() { return cParameterAssignment_8_2; }

		//Number
		public RuleCall getParameterNumberParserRuleCall_8_2_0() { return cParameterNumberParserRuleCall_8_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }

		//definition=MetricDefinition
		public Assignment getDefinitionAssignment_9() { return cDefinitionAssignment_9; }

		//MetricDefinition
		public RuleCall getDefinitionMetricDefinitionParserRuleCall_9_0() { return cDefinitionMetricDefinitionParserRuleCall_9_0; }

		//"};"
		public Keyword getRightCurlyBracketSemicolonKeyword_10() { return cRightCurlyBracketSemicolonKeyword_10; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Number:
		//	Parameter | Constant;
		public ParserRule getRule() { return rule; }

		//Parameter | Constant
		public Alternatives getAlternatives() { return cAlternatives; }

		//Parameter
		public RuleCall getParameterParserRuleCall_0() { return cParameterParserRuleCall_0; }

		//Constant
		public RuleCall getConstantParserRuleCall_1() { return cConstantParserRuleCall_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMYIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cShortnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cShortnameSTRINGTerminalRuleCall_3_0 = (RuleCall)cShortnameAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDefaultValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDefaultValueDOUBLETerminalRuleCall_7_0 = (RuleCall)cDefaultValueAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Parameter:
		//	"Parameter" name=MYID "(" shortname=STRING "," description=STRING "," defaultValue=DOUBLE ")" ";";
		public ParserRule getRule() { return rule; }

		//"Parameter" name=MYID "(" shortname=STRING "," description=STRING "," defaultValue=DOUBLE ")" ";"
		public Group getGroup() { return cGroup; }

		//"Parameter"
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }

		//name=MYID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//MYID
		public RuleCall getNameMYIDParserRuleCall_1_0() { return cNameMYIDParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//shortname=STRING
		public Assignment getShortnameAssignment_3() { return cShortnameAssignment_3; }

		//STRING
		public RuleCall getShortnameSTRINGTerminalRuleCall_3_0() { return cShortnameSTRINGTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//description=STRING
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0() { return cDescriptionSTRINGTerminalRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//defaultValue=DOUBLE
		public Assignment getDefaultValueAssignment_7() { return cDefaultValueAssignment_7; }

		//DOUBLE
		public RuleCall getDefaultValueDOUBLETerminalRuleCall_7_0() { return cDefaultValueDOUBLETerminalRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMYIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueDOUBLETerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constant:
		//	"Const" name=MYID "=" value=DOUBLE ";";
		public ParserRule getRule() { return rule; }

		//"Const" name=MYID "=" value=DOUBLE ";"
		public Group getGroup() { return cGroup; }

		//"Const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//name=MYID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//MYID
		public RuleCall getNameMYIDParserRuleCall_1_0() { return cNameMYIDParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=DOUBLE
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_3_0() { return cValueDOUBLETerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class MetricDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetricDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWeightedMetricParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStepwiseMetricParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRatioMetricParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MetricDefinition:
		//	WeightedMetric | StepwiseMetric | RatioMetric;
		public ParserRule getRule() { return rule; }

		//WeightedMetric | StepwiseMetric | RatioMetric
		public Alternatives getAlternatives() { return cAlternatives; }

		//WeightedMetric
		public RuleCall getWeightedMetricParserRuleCall_0() { return cWeightedMetricParserRuleCall_0; }

		//StepwiseMetric
		public RuleCall getStepwiseMetricParserRuleCall_1() { return cStepwiseMetricParserRuleCall_1; }

		//RatioMetric
		public RuleCall getRatioMetricParserRuleCall_2() { return cRatioMetricParserRuleCall_2; }
	}

	public class WeightedMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeightedMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeigthedSumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWeightsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWeightsMetricAndWeightParserRuleCall_2_0 = (RuleCall)cWeightsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WeightedMetric:
		//	"WeigthedSum" "{" weights+=MetricAndWeight+ "}";
		public ParserRule getRule() { return rule; }

		//"WeigthedSum" "{" weights+=MetricAndWeight+ "}"
		public Group getGroup() { return cGroup; }

		//"WeigthedSum"
		public Keyword getWeigthedSumKeyword_0() { return cWeigthedSumKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//weights+=MetricAndWeight+
		public Assignment getWeightsAssignment_2() { return cWeightsAssignment_2; }

		//MetricAndWeight
		public RuleCall getWeightsMetricAndWeightParserRuleCall_2_0() { return cWeightsMetricAndWeightParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class StepwiseMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StepwiseMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStepwiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInnerMetricAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInnerMetricMetricCrossReference_2_0 = (CrossReference)cInnerMetricAssignment_2.eContents().get(0);
		private final RuleCall cInnerMetricMetricMYIDParserRuleCall_2_0_1 = (RuleCall)cInnerMetricMetricCrossReference_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepsBoundAndWeightParserRuleCall_5_0 = (RuleCall)cStepsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StepwiseMetric:
		//	"Stepwise" "[" innerMetric=[Metric|MYID] "]" "{" steps+=BoundAndWeight* "}";
		public ParserRule getRule() { return rule; }

		//"Stepwise" "[" innerMetric=[Metric|MYID] "]" "{" steps+=BoundAndWeight* "}"
		public Group getGroup() { return cGroup; }

		//"Stepwise"
		public Keyword getStepwiseKeyword_0() { return cStepwiseKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//innerMetric=[Metric|MYID]
		public Assignment getInnerMetricAssignment_2() { return cInnerMetricAssignment_2; }

		//[Metric|MYID]
		public CrossReference getInnerMetricMetricCrossReference_2_0() { return cInnerMetricMetricCrossReference_2_0; }

		//MYID
		public RuleCall getInnerMetricMetricMYIDParserRuleCall_2_0_1() { return cInnerMetricMetricMYIDParserRuleCall_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//steps+=BoundAndWeight*
		public Assignment getStepsAssignment_5() { return cStepsAssignment_5; }

		//BoundAndWeight
		public RuleCall getStepsBoundAndWeightParserRuleCall_5_0() { return cStepsBoundAndWeightParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RatioMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RatioMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRatioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNominatorMetricAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNominatorMetricMetricCrossReference_2_0 = (CrossReference)cNominatorMetricAssignment_2.eContents().get(0);
		private final RuleCall cNominatorMetricMetricMYIDParserRuleCall_2_0_1 = (RuleCall)cNominatorMetricMetricCrossReference_2_0.eContents().get(1);
		private final Keyword cSolidusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDenominatorMetricAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDenominatorMetricMetricCrossReference_4_0 = (CrossReference)cDenominatorMetricAssignment_4.eContents().get(0);
		private final RuleCall cDenominatorMetricMetricMYIDParserRuleCall_4_0_1 = (RuleCall)cDenominatorMetricMetricCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RatioMetric:
		//	"Ratio" "{" nominatorMetric=[Metric|MYID] "/" denominatorMetric=[Metric|MYID] "}";
		public ParserRule getRule() { return rule; }

		//"Ratio" "{" nominatorMetric=[Metric|MYID] "/" denominatorMetric=[Metric|MYID] "}"
		public Group getGroup() { return cGroup; }

		//"Ratio"
		public Keyword getRatioKeyword_0() { return cRatioKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//nominatorMetric=[Metric|MYID]
		public Assignment getNominatorMetricAssignment_2() { return cNominatorMetricAssignment_2; }

		//[Metric|MYID]
		public CrossReference getNominatorMetricMetricCrossReference_2_0() { return cNominatorMetricMetricCrossReference_2_0; }

		//MYID
		public RuleCall getNominatorMetricMetricMYIDParserRuleCall_2_0_1() { return cNominatorMetricMetricMYIDParserRuleCall_2_0_1; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }

		//denominatorMetric=[Metric|MYID]
		public Assignment getDenominatorMetricAssignment_4() { return cDenominatorMetricAssignment_4; }

		//[Metric|MYID]
		public CrossReference getDenominatorMetricMetricCrossReference_4_0() { return cDenominatorMetricMetricCrossReference_4_0; }

		//MYID
		public RuleCall getDenominatorMetricMetricMYIDParserRuleCall_4_0_1() { return cDenominatorMetricMetricMYIDParserRuleCall_4_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BoundAndWeightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoundAndWeight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUpperBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUpperBoundNumberCrossReference_1_0 = (CrossReference)cUpperBoundAssignment_1.eContents().get(0);
		private final RuleCall cUpperBoundNumberMYIDParserRuleCall_1_0_1 = (RuleCall)cUpperBoundNumberCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cWeightNumberCrossReference_3_0 = (CrossReference)cWeightAssignment_3.eContents().get(0);
		private final RuleCall cWeightNumberMYIDParserRuleCall_3_0_1 = (RuleCall)cWeightNumberCrossReference_3_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BoundAndWeight:
		//	"<" upperBound=[Number|MYID] "," weight=[Number|MYID] ">";
		public ParserRule getRule() { return rule; }

		//"<" upperBound=[Number|MYID] "," weight=[Number|MYID] ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//upperBound=[Number|MYID]
		public Assignment getUpperBoundAssignment_1() { return cUpperBoundAssignment_1; }

		//[Number|MYID]
		public CrossReference getUpperBoundNumberCrossReference_1_0() { return cUpperBoundNumberCrossReference_1_0; }

		//MYID
		public RuleCall getUpperBoundNumberMYIDParserRuleCall_1_0_1() { return cUpperBoundNumberMYIDParserRuleCall_1_0_1; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//weight=[Number|MYID]
		public Assignment getWeightAssignment_3() { return cWeightAssignment_3; }

		//[Number|MYID]
		public CrossReference getWeightNumberCrossReference_3_0() { return cWeightNumberCrossReference_3_0; }

		//MYID
		public RuleCall getWeightNumberMYIDParserRuleCall_3_0_1() { return cWeightNumberMYIDParserRuleCall_3_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class MetricAndWeightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetricAndWeight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetricAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMetricMetricCrossReference_1_0 = (CrossReference)cMetricAssignment_1.eContents().get(0);
		private final RuleCall cMetricMetricMYIDParserRuleCall_1_0_1 = (RuleCall)cMetricMetricCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cWeightNumberCrossReference_3_0 = (CrossReference)cWeightAssignment_3.eContents().get(0);
		private final RuleCall cWeightNumberMYIDParserRuleCall_3_0_1 = (RuleCall)cWeightNumberCrossReference_3_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MetricAndWeight:
		//	"<" metric=[Metric|MYID] "," weight=[Number|MYID] ">";
		public ParserRule getRule() { return rule; }

		//"<" metric=[Metric|MYID] "," weight=[Number|MYID] ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//metric=[Metric|MYID]
		public Assignment getMetricAssignment_1() { return cMetricAssignment_1; }

		//[Metric|MYID]
		public CrossReference getMetricMetricCrossReference_1_0() { return cMetricMetricCrossReference_1_0; }

		//MYID
		public RuleCall getMetricMetricMYIDParserRuleCall_1_0_1() { return cMetricMetricMYIDParserRuleCall_1_0_1; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//weight=[Number|MYID]
		public Assignment getWeightAssignment_3() { return cWeightAssignment_3; }

		//[Number|MYID]
		public CrossReference getWeightNumberCrossReference_3_0() { return cWeightNumberCrossReference_3_0; }

		//MYID
		public RuleCall getWeightNumberMYIDParserRuleCall_3_0_1() { return cWeightNumberMYIDParserRuleCall_3_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class MYIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MYID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//MYID returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private MetricModelElements pMetricModel;
	private MetricElements pMetric;
	private ExternalMetricElements pExternalMetric;
	private InternalMetricElements pInternalMetric;
	private NumberElements pNumber;
	private ParameterElements pParameter;
	private ConstantElements pConstant;
	private MetricDefinitionElements pMetricDefinition;
	private WeightedMetricElements pWeightedMetric;
	private StepwiseMetricElements pStepwiseMetric;
	private RatioMetricElements pRatioMetric;
	private BoundAndWeightElements pBoundAndWeight;
	private MetricAndWeightElements pMetricAndWeight;
	private MYIDElements pMYID;
	private TerminalRule tDOUBLE;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MetricDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.somox.metrics.dsl.MetricDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MetricModel:
	//	("import" importURI+=STRING ";")* ("extern" metrics+=ExternalMetric ";")* "Metrics" "{" metrics+=InternalMetric+ "}";
	public MetricModelElements getMetricModelAccess() {
		return (pMetricModel != null) ? pMetricModel : (pMetricModel = new MetricModelElements());
	}
	
	public ParserRule getMetricModelRule() {
		return getMetricModelAccess().getRule();
	}

	//Metric:
	//	ExternalMetric | InternalMetric;
	public MetricElements getMetricAccess() {
		return (pMetric != null) ? pMetric : (pMetric = new MetricElements());
	}
	
	public ParserRule getMetricRule() {
		return getMetricAccess().getRule();
	}

	//ExternalMetric:
	//	name=MYID;
	public ExternalMetricElements getExternalMetricAccess() {
		return (pExternalMetric != null) ? pExternalMetric : (pExternalMetric = new ExternalMetricElements());
	}
	
	public ParserRule getExternalMetricRule() {
		return getExternalMetricAccess().getRule();
	}

	//InternalMetric:
	//	"Metric" name=MYID "(" shortName=STRING "," description=STRING ")" "{" ("parameters" "{" parameter+=Number* "}")?
	//	definition=MetricDefinition "};";
	public InternalMetricElements getInternalMetricAccess() {
		return (pInternalMetric != null) ? pInternalMetric : (pInternalMetric = new InternalMetricElements());
	}
	
	public ParserRule getInternalMetricRule() {
		return getInternalMetricAccess().getRule();
	}

	//Number:
	//	Parameter | Constant;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//Parameter:
	//	"Parameter" name=MYID "(" shortname=STRING "," description=STRING "," defaultValue=DOUBLE ")" ";";
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Constant:
	//	"Const" name=MYID "=" value=DOUBLE ";";
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//MetricDefinition:
	//	WeightedMetric | StepwiseMetric | RatioMetric;
	public MetricDefinitionElements getMetricDefinitionAccess() {
		return (pMetricDefinition != null) ? pMetricDefinition : (pMetricDefinition = new MetricDefinitionElements());
	}
	
	public ParserRule getMetricDefinitionRule() {
		return getMetricDefinitionAccess().getRule();
	}

	//WeightedMetric:
	//	"WeigthedSum" "{" weights+=MetricAndWeight+ "}";
	public WeightedMetricElements getWeightedMetricAccess() {
		return (pWeightedMetric != null) ? pWeightedMetric : (pWeightedMetric = new WeightedMetricElements());
	}
	
	public ParserRule getWeightedMetricRule() {
		return getWeightedMetricAccess().getRule();
	}

	//StepwiseMetric:
	//	"Stepwise" "[" innerMetric=[Metric|MYID] "]" "{" steps+=BoundAndWeight* "}";
	public StepwiseMetricElements getStepwiseMetricAccess() {
		return (pStepwiseMetric != null) ? pStepwiseMetric : (pStepwiseMetric = new StepwiseMetricElements());
	}
	
	public ParserRule getStepwiseMetricRule() {
		return getStepwiseMetricAccess().getRule();
	}

	//RatioMetric:
	//	"Ratio" "{" nominatorMetric=[Metric|MYID] "/" denominatorMetric=[Metric|MYID] "}";
	public RatioMetricElements getRatioMetricAccess() {
		return (pRatioMetric != null) ? pRatioMetric : (pRatioMetric = new RatioMetricElements());
	}
	
	public ParserRule getRatioMetricRule() {
		return getRatioMetricAccess().getRule();
	}

	//BoundAndWeight:
	//	"<" upperBound=[Number|MYID] "," weight=[Number|MYID] ">";
	public BoundAndWeightElements getBoundAndWeightAccess() {
		return (pBoundAndWeight != null) ? pBoundAndWeight : (pBoundAndWeight = new BoundAndWeightElements());
	}
	
	public ParserRule getBoundAndWeightRule() {
		return getBoundAndWeightAccess().getRule();
	}

	//MetricAndWeight:
	//	"<" metric=[Metric|MYID] "," weight=[Number|MYID] ">";
	public MetricAndWeightElements getMetricAndWeightAccess() {
		return (pMetricAndWeight != null) ? pMetricAndWeight : (pMetricAndWeight = new MetricAndWeightElements());
	}
	
	public ParserRule getMetricAndWeightRule() {
		return getMetricAndWeightAccess().getRule();
	}

	//MYID returns ecore::EString:
	//	ID ("." ID)*;
	public MYIDElements getMYIDAccess() {
		return (pMYID != null) ? pMYID : (pMYID = new MYIDElements());
	}
	
	public ParserRule getMYIDRule() {
		return getMYIDAccess().getRule();
	}

	//terminal DOUBLE returns ecore::EDouble:
	//	"-"? INT "." INT;
	public TerminalRule getDOUBLERule() {
		return (tDOUBLE != null) ? tDOUBLE : (tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
