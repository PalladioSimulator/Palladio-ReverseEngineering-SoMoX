/*
* generated by Xtext
*/
package org.somox.metrics.dsl.services;

import java.util.List;

import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class MetricDSLGrammarAccess extends AbstractGrammarElementFinder {

    public class MetricModelElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "MetricModel");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Group cGroup_0 = (Group) this.cGroup.eContents().get(0);
        private final Keyword cImportKeyword_0_0 = (Keyword) this.cGroup_0.eContents().get(0);
        private final Assignment cImportURIAssignment_0_1 = (Assignment) this.cGroup_0.eContents().get(1);
        private final RuleCall cImportURISTRINGTerminalRuleCall_0_1_0 = (RuleCall) this.cImportURIAssignment_0_1
                .eContents().get(0);
        private final Keyword cSemicolonKeyword_0_2 = (Keyword) this.cGroup_0.eContents().get(2);
        private final Group cGroup_1 = (Group) this.cGroup.eContents().get(1);
        private final Keyword cExternKeyword_1_0 = (Keyword) this.cGroup_1.eContents().get(0);
        private final Assignment cMetricsAssignment_1_1 = (Assignment) this.cGroup_1.eContents().get(1);
        private final RuleCall cMetricsExternalMetricParserRuleCall_1_1_0 = (RuleCall) this.cMetricsAssignment_1_1
                .eContents().get(0);
        private final Keyword cSemicolonKeyword_1_2 = (Keyword) this.cGroup_1.eContents().get(2);
        private final Keyword cMetricsKeyword_2 = (Keyword) this.cGroup.eContents().get(2);
        private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword) this.cGroup.eContents().get(3);
        private final Assignment cMetricsAssignment_4 = (Assignment) this.cGroup.eContents().get(4);
        private final RuleCall cMetricsInternalMetricParserRuleCall_4_0 = (RuleCall) this.cMetricsAssignment_4
                .eContents().get(0);
        private final Keyword cRightCurlyBracketKeyword_5 = (Keyword) this.cGroup.eContents().get(5);

        // MetricModel:
        // ("import" importURI+=STRING ";")* ("extern" metrics+=ExternalMetric ";")* "Metrics" "{"
        // metrics+=InternalMetric+ "}";
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // ("import" importURI+=STRING ";")* ("extern" metrics+=ExternalMetric ";")* "Metrics" "{"
        // metrics+=InternalMetric+ "}"
        public Group getGroup() {
            return this.cGroup;
        }

        // ("import" importURI+=STRING ";")*
        public Group getGroup_0() {
            return this.cGroup_0;
        }

        // "import"
        public Keyword getImportKeyword_0_0() {
            return this.cImportKeyword_0_0;
        }

        // importURI+=STRING
        public Assignment getImportURIAssignment_0_1() {
            return this.cImportURIAssignment_0_1;
        }

        // STRING
        public RuleCall getImportURISTRINGTerminalRuleCall_0_1_0() {
            return this.cImportURISTRINGTerminalRuleCall_0_1_0;
        }

        // ";"
        public Keyword getSemicolonKeyword_0_2() {
            return this.cSemicolonKeyword_0_2;
        }

        // ("extern" metrics+=ExternalMetric ";")*
        public Group getGroup_1() {
            return this.cGroup_1;
        }

        // "extern"
        public Keyword getExternKeyword_1_0() {
            return this.cExternKeyword_1_0;
        }

        // metrics+=ExternalMetric
        public Assignment getMetricsAssignment_1_1() {
            return this.cMetricsAssignment_1_1;
        }

        // ExternalMetric
        public RuleCall getMetricsExternalMetricParserRuleCall_1_1_0() {
            return this.cMetricsExternalMetricParserRuleCall_1_1_0;
        }

        // ";"
        public Keyword getSemicolonKeyword_1_2() {
            return this.cSemicolonKeyword_1_2;
        }

        // "Metrics"
        public Keyword getMetricsKeyword_2() {
            return this.cMetricsKeyword_2;
        }

        // "{"
        public Keyword getLeftCurlyBracketKeyword_3() {
            return this.cLeftCurlyBracketKeyword_3;
        }

        // metrics+=InternalMetric+
        public Assignment getMetricsAssignment_4() {
            return this.cMetricsAssignment_4;
        }

        // InternalMetric
        public RuleCall getMetricsInternalMetricParserRuleCall_4_0() {
            return this.cMetricsInternalMetricParserRuleCall_4_0;
        }

        // "}"
        public Keyword getRightCurlyBracketKeyword_5() {
            return this.cRightCurlyBracketKeyword_5;
        }
    }

    public class MetricElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "Metric");
        private final Alternatives cAlternatives = (Alternatives) this.rule.eContents().get(1);
        private final RuleCall cExternalMetricParserRuleCall_0 = (RuleCall) this.cAlternatives.eContents().get(0);
        private final RuleCall cInternalMetricParserRuleCall_1 = (RuleCall) this.cAlternatives.eContents().get(1);

        // Metric:
        // ExternalMetric | InternalMetric;
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // ExternalMetric | InternalMetric
        public Alternatives getAlternatives() {
            return this.cAlternatives;
        }

        // ExternalMetric
        public RuleCall getExternalMetricParserRuleCall_0() {
            return this.cExternalMetricParserRuleCall_0;
        }

        // InternalMetric
        public RuleCall getInternalMetricParserRuleCall_1() {
            return this.cInternalMetricParserRuleCall_1;
        }
    }

    public class ExternalMetricElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "ExternalMetric");
        private final Assignment cNameAssignment = (Assignment) this.rule.eContents().get(1);
        private final RuleCall cNameMYIDParserRuleCall_0 = (RuleCall) this.cNameAssignment.eContents().get(0);

        // ExternalMetric:
        // name=MYID;
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // name=MYID
        public Assignment getNameAssignment() {
            return this.cNameAssignment;
        }

        // MYID
        public RuleCall getNameMYIDParserRuleCall_0() {
            return this.cNameMYIDParserRuleCall_0;
        }
    }

    public class InternalMetricElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "InternalMetric");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Keyword cMetricKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
        private final Assignment cNameAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
        private final RuleCall cNameMYIDParserRuleCall_1_0 = (RuleCall) this.cNameAssignment_1.eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_2 = (Keyword) this.cGroup.eContents().get(2);
        private final Assignment cShortNameAssignment_3 = (Assignment) this.cGroup.eContents().get(3);
        private final RuleCall cShortNameSTRINGTerminalRuleCall_3_0 = (RuleCall) this.cShortNameAssignment_3.eContents()
                .get(0);
        private final Keyword cCommaKeyword_4 = (Keyword) this.cGroup.eContents().get(4);
        private final Assignment cDescriptionAssignment_5 = (Assignment) this.cGroup.eContents().get(5);
        private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0 = (RuleCall) this.cDescriptionAssignment_5
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_6 = (Keyword) this.cGroup.eContents().get(6);
        private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword) this.cGroup.eContents().get(7);
        private final Group cGroup_8 = (Group) this.cGroup.eContents().get(8);
        private final Keyword cParametersKeyword_8_0 = (Keyword) this.cGroup_8.eContents().get(0);
        private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword) this.cGroup_8.eContents().get(1);
        private final Assignment cParameterAssignment_8_2 = (Assignment) this.cGroup_8.eContents().get(2);
        private final RuleCall cParameterNumberParserRuleCall_8_2_0 = (RuleCall) this.cParameterAssignment_8_2
                .eContents().get(0);
        private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword) this.cGroup_8.eContents().get(3);
        private final Assignment cDefinitionAssignment_9 = (Assignment) this.cGroup.eContents().get(9);
        private final RuleCall cDefinitionMetricDefinitionParserRuleCall_9_0 = (RuleCall) this.cDefinitionAssignment_9
                .eContents().get(0);
        private final Keyword cRightCurlyBracketSemicolonKeyword_10 = (Keyword) this.cGroup.eContents().get(10);

        // InternalMetric:
        // "Metric" name=MYID "(" shortName=STRING "," description=STRING ")" "{" ("parameters" "{"
        // parameter+=Number* "}")?
        // definition=MetricDefinition "};";
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // "Metric" name=MYID "(" shortName=STRING "," description=STRING ")" "{" ("parameters" "{"
        // parameter+=Number* "}")?
        // definition=MetricDefinition "};"
        public Group getGroup() {
            return this.cGroup;
        }

        // "Metric"
        public Keyword getMetricKeyword_0() {
            return this.cMetricKeyword_0;
        }

        // name=MYID
        public Assignment getNameAssignment_1() {
            return this.cNameAssignment_1;
        }

        // MYID
        public RuleCall getNameMYIDParserRuleCall_1_0() {
            return this.cNameMYIDParserRuleCall_1_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_2() {
            return this.cLeftParenthesisKeyword_2;
        }

        // shortName=STRING
        public Assignment getShortNameAssignment_3() {
            return this.cShortNameAssignment_3;
        }

        // STRING
        public RuleCall getShortNameSTRINGTerminalRuleCall_3_0() {
            return this.cShortNameSTRINGTerminalRuleCall_3_0;
        }

        // ","
        public Keyword getCommaKeyword_4() {
            return this.cCommaKeyword_4;
        }

        // description=STRING
        public Assignment getDescriptionAssignment_5() {
            return this.cDescriptionAssignment_5;
        }

        // STRING
        public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0() {
            return this.cDescriptionSTRINGTerminalRuleCall_5_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_6() {
            return this.cRightParenthesisKeyword_6;
        }

        // "{"
        public Keyword getLeftCurlyBracketKeyword_7() {
            return this.cLeftCurlyBracketKeyword_7;
        }

        // ("parameters" "{" parameter+=Number* "}")?
        public Group getGroup_8() {
            return this.cGroup_8;
        }

        // "parameters"
        public Keyword getParametersKeyword_8_0() {
            return this.cParametersKeyword_8_0;
        }

        // "{"
        public Keyword getLeftCurlyBracketKeyword_8_1() {
            return this.cLeftCurlyBracketKeyword_8_1;
        }

        // parameter+=Number*
        public Assignment getParameterAssignment_8_2() {
            return this.cParameterAssignment_8_2;
        }

        // Number
        public RuleCall getParameterNumberParserRuleCall_8_2_0() {
            return this.cParameterNumberParserRuleCall_8_2_0;
        }

        // "}"
        public Keyword getRightCurlyBracketKeyword_8_3() {
            return this.cRightCurlyBracketKeyword_8_3;
        }

        // definition=MetricDefinition
        public Assignment getDefinitionAssignment_9() {
            return this.cDefinitionAssignment_9;
        }

        // MetricDefinition
        public RuleCall getDefinitionMetricDefinitionParserRuleCall_9_0() {
            return this.cDefinitionMetricDefinitionParserRuleCall_9_0;
        }

        // "};"
        public Keyword getRightCurlyBracketSemicolonKeyword_10() {
            return this.cRightCurlyBracketSemicolonKeyword_10;
        }
    }

    public class NumberElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "Number");
        private final Alternatives cAlternatives = (Alternatives) this.rule.eContents().get(1);
        private final RuleCall cParameterParserRuleCall_0 = (RuleCall) this.cAlternatives.eContents().get(0);
        private final RuleCall cConstantParserRuleCall_1 = (RuleCall) this.cAlternatives.eContents().get(1);

        // Number:
        // Parameter | Constant;
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // Parameter | Constant
        public Alternatives getAlternatives() {
            return this.cAlternatives;
        }

        // Parameter
        public RuleCall getParameterParserRuleCall_0() {
            return this.cParameterParserRuleCall_0;
        }

        // Constant
        public RuleCall getConstantParserRuleCall_1() {
            return this.cConstantParserRuleCall_1;
        }
    }

    public class ParameterElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "Parameter");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Keyword cParameterKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
        private final Assignment cNameAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
        private final RuleCall cNameMYIDParserRuleCall_1_0 = (RuleCall) this.cNameAssignment_1.eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_2 = (Keyword) this.cGroup.eContents().get(2);
        private final Assignment cShortnameAssignment_3 = (Assignment) this.cGroup.eContents().get(3);
        private final RuleCall cShortnameSTRINGTerminalRuleCall_3_0 = (RuleCall) this.cShortnameAssignment_3.eContents()
                .get(0);
        private final Keyword cCommaKeyword_4 = (Keyword) this.cGroup.eContents().get(4);
        private final Assignment cDescriptionAssignment_5 = (Assignment) this.cGroup.eContents().get(5);
        private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0 = (RuleCall) this.cDescriptionAssignment_5
                .eContents().get(0);
        private final Keyword cCommaKeyword_6 = (Keyword) this.cGroup.eContents().get(6);
        private final Assignment cDefaultValueAssignment_7 = (Assignment) this.cGroup.eContents().get(7);
        private final RuleCall cDefaultValueDOUBLETerminalRuleCall_7_0 = (RuleCall) this.cDefaultValueAssignment_7
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_8 = (Keyword) this.cGroup.eContents().get(8);
        private final Keyword cSemicolonKeyword_9 = (Keyword) this.cGroup.eContents().get(9);

        // Parameter:
        // "Parameter" name=MYID "(" shortname=STRING "," description=STRING "," defaultValue=DOUBLE
        // ")" ";";
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // "Parameter" name=MYID "(" shortname=STRING "," description=STRING "," defaultValue=DOUBLE
        // ")" ";"
        public Group getGroup() {
            return this.cGroup;
        }

        // "Parameter"
        public Keyword getParameterKeyword_0() {
            return this.cParameterKeyword_0;
        }

        // name=MYID
        public Assignment getNameAssignment_1() {
            return this.cNameAssignment_1;
        }

        // MYID
        public RuleCall getNameMYIDParserRuleCall_1_0() {
            return this.cNameMYIDParserRuleCall_1_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_2() {
            return this.cLeftParenthesisKeyword_2;
        }

        // shortname=STRING
        public Assignment getShortnameAssignment_3() {
            return this.cShortnameAssignment_3;
        }

        // STRING
        public RuleCall getShortnameSTRINGTerminalRuleCall_3_0() {
            return this.cShortnameSTRINGTerminalRuleCall_3_0;
        }

        // ","
        public Keyword getCommaKeyword_4() {
            return this.cCommaKeyword_4;
        }

        // description=STRING
        public Assignment getDescriptionAssignment_5() {
            return this.cDescriptionAssignment_5;
        }

        // STRING
        public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0() {
            return this.cDescriptionSTRINGTerminalRuleCall_5_0;
        }

        // ","
        public Keyword getCommaKeyword_6() {
            return this.cCommaKeyword_6;
        }

        // defaultValue=DOUBLE
        public Assignment getDefaultValueAssignment_7() {
            return this.cDefaultValueAssignment_7;
        }

        // DOUBLE
        public RuleCall getDefaultValueDOUBLETerminalRuleCall_7_0() {
            return this.cDefaultValueDOUBLETerminalRuleCall_7_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_8() {
            return this.cRightParenthesisKeyword_8;
        }

        // ";"
        public Keyword getSemicolonKeyword_9() {
            return this.cSemicolonKeyword_9;
        }
    }

    public class ConstantElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "Constant");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Keyword cConstKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
        private final Assignment cNameAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
        private final RuleCall cNameMYIDParserRuleCall_1_0 = (RuleCall) this.cNameAssignment_1.eContents().get(0);
        private final Keyword cEqualsSignKeyword_2 = (Keyword) this.cGroup.eContents().get(2);
        private final Assignment cValueAssignment_3 = (Assignment) this.cGroup.eContents().get(3);
        private final RuleCall cValueDOUBLETerminalRuleCall_3_0 = (RuleCall) this.cValueAssignment_3.eContents().get(0);
        private final Keyword cSemicolonKeyword_4 = (Keyword) this.cGroup.eContents().get(4);

        // Constant:
        // "Const" name=MYID "=" value=DOUBLE ";";
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // "Const" name=MYID "=" value=DOUBLE ";"
        public Group getGroup() {
            return this.cGroup;
        }

        // "Const"
        public Keyword getConstKeyword_0() {
            return this.cConstKeyword_0;
        }

        // name=MYID
        public Assignment getNameAssignment_1() {
            return this.cNameAssignment_1;
        }

        // MYID
        public RuleCall getNameMYIDParserRuleCall_1_0() {
            return this.cNameMYIDParserRuleCall_1_0;
        }

        // "="
        public Keyword getEqualsSignKeyword_2() {
            return this.cEqualsSignKeyword_2;
        }

        // value=DOUBLE
        public Assignment getValueAssignment_3() {
            return this.cValueAssignment_3;
        }

        // DOUBLE
        public RuleCall getValueDOUBLETerminalRuleCall_3_0() {
            return this.cValueDOUBLETerminalRuleCall_3_0;
        }

        // ";"
        public Keyword getSemicolonKeyword_4() {
            return this.cSemicolonKeyword_4;
        }
    }

    public class MetricDefinitionElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "MetricDefinition");
        private final Alternatives cAlternatives = (Alternatives) this.rule.eContents().get(1);
        private final RuleCall cWeightedMetricParserRuleCall_0 = (RuleCall) this.cAlternatives.eContents().get(0);
        private final RuleCall cStepwiseMetricParserRuleCall_1 = (RuleCall) this.cAlternatives.eContents().get(1);
        private final RuleCall cRatioMetricParserRuleCall_2 = (RuleCall) this.cAlternatives.eContents().get(2);

        // MetricDefinition:
        // WeightedMetric | StepwiseMetric | RatioMetric;
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // WeightedMetric | StepwiseMetric | RatioMetric
        public Alternatives getAlternatives() {
            return this.cAlternatives;
        }

        // WeightedMetric
        public RuleCall getWeightedMetricParserRuleCall_0() {
            return this.cWeightedMetricParserRuleCall_0;
        }

        // StepwiseMetric
        public RuleCall getStepwiseMetricParserRuleCall_1() {
            return this.cStepwiseMetricParserRuleCall_1;
        }

        // RatioMetric
        public RuleCall getRatioMetricParserRuleCall_2() {
            return this.cRatioMetricParserRuleCall_2;
        }
    }

    public class WeightedMetricElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "WeightedMetric");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Keyword cWeigthedSumKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
        private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword) this.cGroup.eContents().get(1);
        private final Assignment cWeightsAssignment_2 = (Assignment) this.cGroup.eContents().get(2);
        private final RuleCall cWeightsMetricAndWeightParserRuleCall_2_0 = (RuleCall) this.cWeightsAssignment_2
                .eContents().get(0);
        private final Keyword cRightCurlyBracketKeyword_3 = (Keyword) this.cGroup.eContents().get(3);

        // WeightedMetric:
        // "WeigthedSum" "{" weights+=MetricAndWeight+ "}";
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // "WeigthedSum" "{" weights+=MetricAndWeight+ "}"
        public Group getGroup() {
            return this.cGroup;
        }

        // "WeigthedSum"
        public Keyword getWeigthedSumKeyword_0() {
            return this.cWeigthedSumKeyword_0;
        }

        // "{"
        public Keyword getLeftCurlyBracketKeyword_1() {
            return this.cLeftCurlyBracketKeyword_1;
        }

        // weights+=MetricAndWeight+
        public Assignment getWeightsAssignment_2() {
            return this.cWeightsAssignment_2;
        }

        // MetricAndWeight
        public RuleCall getWeightsMetricAndWeightParserRuleCall_2_0() {
            return this.cWeightsMetricAndWeightParserRuleCall_2_0;
        }

        // "}"
        public Keyword getRightCurlyBracketKeyword_3() {
            return this.cRightCurlyBracketKeyword_3;
        }
    }

    public class StepwiseMetricElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "StepwiseMetric");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Keyword cStepwiseKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
        private final Keyword cLeftSquareBracketKeyword_1 = (Keyword) this.cGroup.eContents().get(1);
        private final Assignment cInnerMetricAssignment_2 = (Assignment) this.cGroup.eContents().get(2);
        private final CrossReference cInnerMetricMetricCrossReference_2_0 = (CrossReference) this.cInnerMetricAssignment_2
                .eContents().get(0);
        private final RuleCall cInnerMetricMetricMYIDParserRuleCall_2_0_1 = (RuleCall) this.cInnerMetricMetricCrossReference_2_0
                .eContents().get(1);
        private final Keyword cRightSquareBracketKeyword_3 = (Keyword) this.cGroup.eContents().get(3);
        private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword) this.cGroup.eContents().get(4);
        private final Assignment cStepsAssignment_5 = (Assignment) this.cGroup.eContents().get(5);
        private final RuleCall cStepsBoundAndWeightParserRuleCall_5_0 = (RuleCall) this.cStepsAssignment_5.eContents()
                .get(0);
        private final Keyword cRightCurlyBracketKeyword_6 = (Keyword) this.cGroup.eContents().get(6);

        // StepwiseMetric:
        // "Stepwise" "[" innerMetric=[Metric|MYID] "]" "{" steps+=BoundAndWeight* "}";
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // "Stepwise" "[" innerMetric=[Metric|MYID] "]" "{" steps+=BoundAndWeight* "}"
        public Group getGroup() {
            return this.cGroup;
        }

        // "Stepwise"
        public Keyword getStepwiseKeyword_0() {
            return this.cStepwiseKeyword_0;
        }

        // "["
        public Keyword getLeftSquareBracketKeyword_1() {
            return this.cLeftSquareBracketKeyword_1;
        }

        // innerMetric=[Metric|MYID]
        public Assignment getInnerMetricAssignment_2() {
            return this.cInnerMetricAssignment_2;
        }

        // [Metric|MYID]
        public CrossReference getInnerMetricMetricCrossReference_2_0() {
            return this.cInnerMetricMetricCrossReference_2_0;
        }

        // MYID
        public RuleCall getInnerMetricMetricMYIDParserRuleCall_2_0_1() {
            return this.cInnerMetricMetricMYIDParserRuleCall_2_0_1;
        }

        // "]"
        public Keyword getRightSquareBracketKeyword_3() {
            return this.cRightSquareBracketKeyword_3;
        }

        // "{"
        public Keyword getLeftCurlyBracketKeyword_4() {
            return this.cLeftCurlyBracketKeyword_4;
        }

        // steps+=BoundAndWeight*
        public Assignment getStepsAssignment_5() {
            return this.cStepsAssignment_5;
        }

        // BoundAndWeight
        public RuleCall getStepsBoundAndWeightParserRuleCall_5_0() {
            return this.cStepsBoundAndWeightParserRuleCall_5_0;
        }

        // "}"
        public Keyword getRightCurlyBracketKeyword_6() {
            return this.cRightCurlyBracketKeyword_6;
        }
    }

    public class RatioMetricElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "RatioMetric");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Keyword cRatioKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
        private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword) this.cGroup.eContents().get(1);
        private final Assignment cNominatorMetricAssignment_2 = (Assignment) this.cGroup.eContents().get(2);
        private final CrossReference cNominatorMetricMetricCrossReference_2_0 = (CrossReference) this.cNominatorMetricAssignment_2
                .eContents().get(0);
        private final RuleCall cNominatorMetricMetricMYIDParserRuleCall_2_0_1 = (RuleCall) this.cNominatorMetricMetricCrossReference_2_0
                .eContents().get(1);
        private final Keyword cSolidusKeyword_3 = (Keyword) this.cGroup.eContents().get(3);
        private final Assignment cDenominatorMetricAssignment_4 = (Assignment) this.cGroup.eContents().get(4);
        private final CrossReference cDenominatorMetricMetricCrossReference_4_0 = (CrossReference) this.cDenominatorMetricAssignment_4
                .eContents().get(0);
        private final RuleCall cDenominatorMetricMetricMYIDParserRuleCall_4_0_1 = (RuleCall) this.cDenominatorMetricMetricCrossReference_4_0
                .eContents().get(1);
        private final Keyword cRightCurlyBracketKeyword_5 = (Keyword) this.cGroup.eContents().get(5);

        // RatioMetric:
        // "Ratio" "{" nominatorMetric=[Metric|MYID] "/" denominatorMetric=[Metric|MYID] "}";
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // "Ratio" "{" nominatorMetric=[Metric|MYID] "/" denominatorMetric=[Metric|MYID] "}"
        public Group getGroup() {
            return this.cGroup;
        }

        // "Ratio"
        public Keyword getRatioKeyword_0() {
            return this.cRatioKeyword_0;
        }

        // "{"
        public Keyword getLeftCurlyBracketKeyword_1() {
            return this.cLeftCurlyBracketKeyword_1;
        }

        // nominatorMetric=[Metric|MYID]
        public Assignment getNominatorMetricAssignment_2() {
            return this.cNominatorMetricAssignment_2;
        }

        // [Metric|MYID]
        public CrossReference getNominatorMetricMetricCrossReference_2_0() {
            return this.cNominatorMetricMetricCrossReference_2_0;
        }

        // MYID
        public RuleCall getNominatorMetricMetricMYIDParserRuleCall_2_0_1() {
            return this.cNominatorMetricMetricMYIDParserRuleCall_2_0_1;
        }

        // "/"
        public Keyword getSolidusKeyword_3() {
            return this.cSolidusKeyword_3;
        }

        // denominatorMetric=[Metric|MYID]
        public Assignment getDenominatorMetricAssignment_4() {
            return this.cDenominatorMetricAssignment_4;
        }

        // [Metric|MYID]
        public CrossReference getDenominatorMetricMetricCrossReference_4_0() {
            return this.cDenominatorMetricMetricCrossReference_4_0;
        }

        // MYID
        public RuleCall getDenominatorMetricMetricMYIDParserRuleCall_4_0_1() {
            return this.cDenominatorMetricMetricMYIDParserRuleCall_4_0_1;
        }

        // "}"
        public Keyword getRightCurlyBracketKeyword_5() {
            return this.cRightCurlyBracketKeyword_5;
        }
    }

    public class BoundAndWeightElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "BoundAndWeight");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Keyword cLessThanSignKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
        private final Assignment cUpperBoundAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
        private final CrossReference cUpperBoundNumberCrossReference_1_0 = (CrossReference) this.cUpperBoundAssignment_1
                .eContents().get(0);
        private final RuleCall cUpperBoundNumberMYIDParserRuleCall_1_0_1 = (RuleCall) this.cUpperBoundNumberCrossReference_1_0
                .eContents().get(1);
        private final Keyword cCommaKeyword_2 = (Keyword) this.cGroup.eContents().get(2);
        private final Assignment cWeightAssignment_3 = (Assignment) this.cGroup.eContents().get(3);
        private final CrossReference cWeightNumberCrossReference_3_0 = (CrossReference) this.cWeightAssignment_3
                .eContents().get(0);
        private final RuleCall cWeightNumberMYIDParserRuleCall_3_0_1 = (RuleCall) this.cWeightNumberCrossReference_3_0
                .eContents().get(1);
        private final Keyword cGreaterThanSignKeyword_4 = (Keyword) this.cGroup.eContents().get(4);

        // BoundAndWeight:
        // "<" upperBound=[Number|MYID] "," weight=[Number|MYID] ">";
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // "<" upperBound=[Number|MYID] "," weight=[Number|MYID] ">"
        public Group getGroup() {
            return this.cGroup;
        }

        // "<"
        public Keyword getLessThanSignKeyword_0() {
            return this.cLessThanSignKeyword_0;
        }

        // upperBound=[Number|MYID]
        public Assignment getUpperBoundAssignment_1() {
            return this.cUpperBoundAssignment_1;
        }

        // [Number|MYID]
        public CrossReference getUpperBoundNumberCrossReference_1_0() {
            return this.cUpperBoundNumberCrossReference_1_0;
        }

        // MYID
        public RuleCall getUpperBoundNumberMYIDParserRuleCall_1_0_1() {
            return this.cUpperBoundNumberMYIDParserRuleCall_1_0_1;
        }

        // ","
        public Keyword getCommaKeyword_2() {
            return this.cCommaKeyword_2;
        }

        // weight=[Number|MYID]
        public Assignment getWeightAssignment_3() {
            return this.cWeightAssignment_3;
        }

        // [Number|MYID]
        public CrossReference getWeightNumberCrossReference_3_0() {
            return this.cWeightNumberCrossReference_3_0;
        }

        // MYID
        public RuleCall getWeightNumberMYIDParserRuleCall_3_0_1() {
            return this.cWeightNumberMYIDParserRuleCall_3_0_1;
        }

        // ">"
        public Keyword getGreaterThanSignKeyword_4() {
            return this.cGreaterThanSignKeyword_4;
        }
    }

    public class MetricAndWeightElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "MetricAndWeight");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Keyword cLessThanSignKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
        private final Assignment cMetricAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
        private final CrossReference cMetricMetricCrossReference_1_0 = (CrossReference) this.cMetricAssignment_1
                .eContents().get(0);
        private final RuleCall cMetricMetricMYIDParserRuleCall_1_0_1 = (RuleCall) this.cMetricMetricCrossReference_1_0
                .eContents().get(1);
        private final Keyword cCommaKeyword_2 = (Keyword) this.cGroup.eContents().get(2);
        private final Assignment cWeightAssignment_3 = (Assignment) this.cGroup.eContents().get(3);
        private final CrossReference cWeightNumberCrossReference_3_0 = (CrossReference) this.cWeightAssignment_3
                .eContents().get(0);
        private final RuleCall cWeightNumberMYIDParserRuleCall_3_0_1 = (RuleCall) this.cWeightNumberCrossReference_3_0
                .eContents().get(1);
        private final Keyword cGreaterThanSignKeyword_4 = (Keyword) this.cGroup.eContents().get(4);

        // MetricAndWeight:
        // "<" metric=[Metric|MYID] "," weight=[Number|MYID] ">";
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // "<" metric=[Metric|MYID] "," weight=[Number|MYID] ">"
        public Group getGroup() {
            return this.cGroup;
        }

        // "<"
        public Keyword getLessThanSignKeyword_0() {
            return this.cLessThanSignKeyword_0;
        }

        // metric=[Metric|MYID]
        public Assignment getMetricAssignment_1() {
            return this.cMetricAssignment_1;
        }

        // [Metric|MYID]
        public CrossReference getMetricMetricCrossReference_1_0() {
            return this.cMetricMetricCrossReference_1_0;
        }

        // MYID
        public RuleCall getMetricMetricMYIDParserRuleCall_1_0_1() {
            return this.cMetricMetricMYIDParserRuleCall_1_0_1;
        }

        // ","
        public Keyword getCommaKeyword_2() {
            return this.cCommaKeyword_2;
        }

        // weight=[Number|MYID]
        public Assignment getWeightAssignment_3() {
            return this.cWeightAssignment_3;
        }

        // [Number|MYID]
        public CrossReference getWeightNumberCrossReference_3_0() {
            return this.cWeightNumberCrossReference_3_0;
        }

        // MYID
        public RuleCall getWeightNumberMYIDParserRuleCall_3_0_1() {
            return this.cWeightNumberMYIDParserRuleCall_3_0_1;
        }

        // ">"
        public Keyword getGreaterThanSignKeyword_4() {
            return this.cGreaterThanSignKeyword_4;
        }
    }

    public class MYIDElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(MetricDSLGrammarAccess.this.getGrammar(), "MYID");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final RuleCall cIDTerminalRuleCall_0 = (RuleCall) this.cGroup.eContents().get(0);
        private final Group cGroup_1 = (Group) this.cGroup.eContents().get(1);
        private final Keyword cFullStopKeyword_1_0 = (Keyword) this.cGroup_1.eContents().get(0);
        private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall) this.cGroup_1.eContents().get(1);

        // MYID returns ecore::EString:
        // ID ("." ID)*;
        @Override
        public ParserRule getRule() {
            return this.rule;
        }

        // ID ("." ID)*
        public Group getGroup() {
            return this.cGroup;
        }

        // ID
        public RuleCall getIDTerminalRuleCall_0() {
            return this.cIDTerminalRuleCall_0;
        }

        // ("." ID)*
        public Group getGroup_1() {
            return this.cGroup_1;
        }

        // "."
        public Keyword getFullStopKeyword_1_0() {
            return this.cFullStopKeyword_1_0;
        }

        // ID
        public RuleCall getIDTerminalRuleCall_1_1() {
            return this.cIDTerminalRuleCall_1_1;
        }
    }

    private MetricModelElements pMetricModel;
    private MetricElements pMetric;
    private ExternalMetricElements pExternalMetric;
    private InternalMetricElements pInternalMetric;
    private NumberElements pNumber;
    private ParameterElements pParameter;
    private ConstantElements pConstant;
    private MetricDefinitionElements pMetricDefinition;
    private WeightedMetricElements pWeightedMetric;
    private StepwiseMetricElements pStepwiseMetric;
    private RatioMetricElements pRatioMetric;
    private BoundAndWeightElements pBoundAndWeight;
    private MetricAndWeightElements pMetricAndWeight;
    private MYIDElements pMYID;
    private TerminalRule tDOUBLE;

    private final Grammar grammar;

    private final TerminalsGrammarAccess gaTerminals;

    @Inject
    public MetricDSLGrammarAccess(final GrammarProvider grammarProvider, final TerminalsGrammarAccess gaTerminals) {
        this.grammar = this.internalFindGrammar(grammarProvider);
        this.gaTerminals = gaTerminals;
    }

    protected Grammar internalFindGrammar(final GrammarProvider grammarProvider) {
        Grammar grammar = grammarProvider.getGrammar(this);
        while (grammar != null) {
            if ("org.somox.metrics.dsl.MetricDSL".equals(grammar.getName())) {
                return grammar;
            }
            final List<Grammar> grammars = grammar.getUsedGrammars();
            if (!grammars.isEmpty()) {
                grammar = grammars.iterator().next();
            } else {
                return null;
            }
        }
        return grammar;
    }

    @Override
    public Grammar getGrammar() {
        return this.grammar;
    }

    public TerminalsGrammarAccess getTerminalsGrammarAccess() {
        return this.gaTerminals;
    }

    // MetricModel:
    // ("import" importURI+=STRING ";")* ("extern" metrics+=ExternalMetric ";")* "Metrics" "{"
    // metrics+=InternalMetric+ "}";
    public MetricModelElements getMetricModelAccess() {
        return (this.pMetricModel != null) ? this.pMetricModel : (this.pMetricModel = new MetricModelElements());
    }

    public ParserRule getMetricModelRule() {
        return this.getMetricModelAccess().getRule();
    }

    // Metric:
    // ExternalMetric | InternalMetric;
    public MetricElements getMetricAccess() {
        return (this.pMetric != null) ? this.pMetric : (this.pMetric = new MetricElements());
    }

    public ParserRule getMetricRule() {
        return this.getMetricAccess().getRule();
    }

    // ExternalMetric:
    // name=MYID;
    public ExternalMetricElements getExternalMetricAccess() {
        return (this.pExternalMetric != null) ? this.pExternalMetric
                : (this.pExternalMetric = new ExternalMetricElements());
    }

    public ParserRule getExternalMetricRule() {
        return this.getExternalMetricAccess().getRule();
    }

    // InternalMetric:
    // "Metric" name=MYID "(" shortName=STRING "," description=STRING ")" "{" ("parameters" "{"
    // parameter+=Number* "}")?
    // definition=MetricDefinition "};";
    public InternalMetricElements getInternalMetricAccess() {
        return (this.pInternalMetric != null) ? this.pInternalMetric
                : (this.pInternalMetric = new InternalMetricElements());
    }

    public ParserRule getInternalMetricRule() {
        return this.getInternalMetricAccess().getRule();
    }

    // Number:
    // Parameter | Constant;
    public NumberElements getNumberAccess() {
        return (this.pNumber != null) ? this.pNumber : (this.pNumber = new NumberElements());
    }

    public ParserRule getNumberRule() {
        return this.getNumberAccess().getRule();
    }

    // Parameter:
    // "Parameter" name=MYID "(" shortname=STRING "," description=STRING "," defaultValue=DOUBLE ")"
    // ";";
    public ParameterElements getParameterAccess() {
        return (this.pParameter != null) ? this.pParameter : (this.pParameter = new ParameterElements());
    }

    public ParserRule getParameterRule() {
        return this.getParameterAccess().getRule();
    }

    // Constant:
    // "Const" name=MYID "=" value=DOUBLE ";";
    public ConstantElements getConstantAccess() {
        return (this.pConstant != null) ? this.pConstant : (this.pConstant = new ConstantElements());
    }

    public ParserRule getConstantRule() {
        return this.getConstantAccess().getRule();
    }

    // MetricDefinition:
    // WeightedMetric | StepwiseMetric | RatioMetric;
    public MetricDefinitionElements getMetricDefinitionAccess() {
        return (this.pMetricDefinition != null) ? this.pMetricDefinition
                : (this.pMetricDefinition = new MetricDefinitionElements());
    }

    public ParserRule getMetricDefinitionRule() {
        return this.getMetricDefinitionAccess().getRule();
    }

    // WeightedMetric:
    // "WeigthedSum" "{" weights+=MetricAndWeight+ "}";
    public WeightedMetricElements getWeightedMetricAccess() {
        return (this.pWeightedMetric != null) ? this.pWeightedMetric
                : (this.pWeightedMetric = new WeightedMetricElements());
    }

    public ParserRule getWeightedMetricRule() {
        return this.getWeightedMetricAccess().getRule();
    }

    // StepwiseMetric:
    // "Stepwise" "[" innerMetric=[Metric|MYID] "]" "{" steps+=BoundAndWeight* "}";
    public StepwiseMetricElements getStepwiseMetricAccess() {
        return (this.pStepwiseMetric != null) ? this.pStepwiseMetric
                : (this.pStepwiseMetric = new StepwiseMetricElements());
    }

    public ParserRule getStepwiseMetricRule() {
        return this.getStepwiseMetricAccess().getRule();
    }

    // RatioMetric:
    // "Ratio" "{" nominatorMetric=[Metric|MYID] "/" denominatorMetric=[Metric|MYID] "}";
    public RatioMetricElements getRatioMetricAccess() {
        return (this.pRatioMetric != null) ? this.pRatioMetric : (this.pRatioMetric = new RatioMetricElements());
    }

    public ParserRule getRatioMetricRule() {
        return this.getRatioMetricAccess().getRule();
    }

    // BoundAndWeight:
    // "<" upperBound=[Number|MYID] "," weight=[Number|MYID] ">";
    public BoundAndWeightElements getBoundAndWeightAccess() {
        return (this.pBoundAndWeight != null) ? this.pBoundAndWeight
                : (this.pBoundAndWeight = new BoundAndWeightElements());
    }

    public ParserRule getBoundAndWeightRule() {
        return this.getBoundAndWeightAccess().getRule();
    }

    // MetricAndWeight:
    // "<" metric=[Metric|MYID] "," weight=[Number|MYID] ">";
    public MetricAndWeightElements getMetricAndWeightAccess() {
        return (this.pMetricAndWeight != null) ? this.pMetricAndWeight
                : (this.pMetricAndWeight = new MetricAndWeightElements());
    }

    public ParserRule getMetricAndWeightRule() {
        return this.getMetricAndWeightAccess().getRule();
    }

    // MYID returns ecore::EString:
    // ID ("." ID)*;
    public MYIDElements getMYIDAccess() {
        return (this.pMYID != null) ? this.pMYID : (this.pMYID = new MYIDElements());
    }

    public ParserRule getMYIDRule() {
        return this.getMYIDAccess().getRule();
    }

    // terminal DOUBLE returns ecore::EDouble:
    // "-"? INT "." INT;
    public TerminalRule getDOUBLERule() {
        return (this.tDOUBLE != null) ? this.tDOUBLE
                : (this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(this.getGrammar(), "DOUBLE"));
    }

    // terminal ID:
    // "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
    public TerminalRule getIDRule() {
        return this.gaTerminals.getIDRule();
    }

    // terminal INT returns ecore::EInt:
    // "0".."9"+;
    public TerminalRule getINTRule() {
        return this.gaTerminals.getINTRule();
    }

    // terminal STRING:
    // "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" |
    // "\'" ("\\" ("b" | "t" |
    // "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
    public TerminalRule getSTRINGRule() {
        return this.gaTerminals.getSTRINGRule();
    }

    // terminal ML_COMMENT:
    // "/ *"->"* /";
    public TerminalRule getML_COMMENTRule() {
        return this.gaTerminals.getML_COMMENTRule();
    }

    // terminal SL_COMMENT:
    // "//" !("\n" | "\r")* ("\r"? "\n")?;
    public TerminalRule getSL_COMMENTRule() {
        return this.gaTerminals.getSL_COMMENTRule();
    }

    // terminal WS:
    // (" " | "\t" | "\r" | "\n")+;
    public TerminalRule getWSRule() {
        return this.gaTerminals.getWSRule();
    }

    // terminal ANY_OTHER:
    // .;
    public TerminalRule getANY_OTHERRule() {
        return this.gaTerminals.getANY_OTHERRule();
    }
}
