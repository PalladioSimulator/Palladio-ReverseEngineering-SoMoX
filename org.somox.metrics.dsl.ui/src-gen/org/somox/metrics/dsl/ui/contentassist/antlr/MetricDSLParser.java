/*
* generated by Xtext
*/
package org.somox.metrics.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.somox.metrics.dsl.services.MetricDSLGrammarAccess;

public class MetricDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private MetricDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.somox.metrics.dsl.ui.contentassist.antlr.internal.InternalMetricDSLParser createParser() {
		org.somox.metrics.dsl.ui.contentassist.antlr.internal.InternalMetricDSLParser result = new org.somox.metrics.dsl.ui.contentassist.antlr.internal.InternalMetricDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMetricAccess().getAlternatives(), "rule__Metric__Alternatives");
					put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
					put(grammarAccess.getMetricDefinitionAccess().getAlternatives(), "rule__MetricDefinition__Alternatives");
					put(grammarAccess.getMetricModelAccess().getGroup(), "rule__MetricModel__Group__0");
					put(grammarAccess.getMetricModelAccess().getGroup_0(), "rule__MetricModel__Group_0__0");
					put(grammarAccess.getMetricModelAccess().getGroup_1(), "rule__MetricModel__Group_1__0");
					put(grammarAccess.getInternalMetricAccess().getGroup(), "rule__InternalMetric__Group__0");
					put(grammarAccess.getInternalMetricAccess().getGroup_8(), "rule__InternalMetric__Group_8__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
					put(grammarAccess.getWeightedMetricAccess().getGroup(), "rule__WeightedMetric__Group__0");
					put(grammarAccess.getStepwiseMetricAccess().getGroup(), "rule__StepwiseMetric__Group__0");
					put(grammarAccess.getRatioMetricAccess().getGroup(), "rule__RatioMetric__Group__0");
					put(grammarAccess.getBoundAndWeightAccess().getGroup(), "rule__BoundAndWeight__Group__0");
					put(grammarAccess.getMetricAndWeightAccess().getGroup(), "rule__MetricAndWeight__Group__0");
					put(grammarAccess.getMYIDAccess().getGroup(), "rule__MYID__Group__0");
					put(grammarAccess.getMYIDAccess().getGroup_1(), "rule__MYID__Group_1__0");
					put(grammarAccess.getMetricModelAccess().getImportURIAssignment_0_1(), "rule__MetricModel__ImportURIAssignment_0_1");
					put(grammarAccess.getMetricModelAccess().getMetricsAssignment_1_1(), "rule__MetricModel__MetricsAssignment_1_1");
					put(grammarAccess.getMetricModelAccess().getMetricsAssignment_4(), "rule__MetricModel__MetricsAssignment_4");
					put(grammarAccess.getExternalMetricAccess().getNameAssignment(), "rule__ExternalMetric__NameAssignment");
					put(grammarAccess.getInternalMetricAccess().getNameAssignment_1(), "rule__InternalMetric__NameAssignment_1");
					put(grammarAccess.getInternalMetricAccess().getShortNameAssignment_3(), "rule__InternalMetric__ShortNameAssignment_3");
					put(grammarAccess.getInternalMetricAccess().getDescriptionAssignment_5(), "rule__InternalMetric__DescriptionAssignment_5");
					put(grammarAccess.getInternalMetricAccess().getParameterAssignment_8_2(), "rule__InternalMetric__ParameterAssignment_8_2");
					put(grammarAccess.getInternalMetricAccess().getDefinitionAssignment_9(), "rule__InternalMetric__DefinitionAssignment_9");
					put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
					put(grammarAccess.getParameterAccess().getShortnameAssignment_3(), "rule__Parameter__ShortnameAssignment_3");
					put(grammarAccess.getParameterAccess().getDescriptionAssignment_5(), "rule__Parameter__DescriptionAssignment_5");
					put(grammarAccess.getParameterAccess().getDefaultValueAssignment_7(), "rule__Parameter__DefaultValueAssignment_7");
					put(grammarAccess.getConstantAccess().getNameAssignment_1(), "rule__Constant__NameAssignment_1");
					put(grammarAccess.getConstantAccess().getValueAssignment_3(), "rule__Constant__ValueAssignment_3");
					put(grammarAccess.getWeightedMetricAccess().getWeightsAssignment_2(), "rule__WeightedMetric__WeightsAssignment_2");
					put(grammarAccess.getStepwiseMetricAccess().getInnerMetricAssignment_2(), "rule__StepwiseMetric__InnerMetricAssignment_2");
					put(grammarAccess.getStepwiseMetricAccess().getStepsAssignment_5(), "rule__StepwiseMetric__StepsAssignment_5");
					put(grammarAccess.getRatioMetricAccess().getNominatorMetricAssignment_2(), "rule__RatioMetric__NominatorMetricAssignment_2");
					put(grammarAccess.getRatioMetricAccess().getDenominatorMetricAssignment_4(), "rule__RatioMetric__DenominatorMetricAssignment_4");
					put(grammarAccess.getBoundAndWeightAccess().getUpperBoundAssignment_1(), "rule__BoundAndWeight__UpperBoundAssignment_1");
					put(grammarAccess.getBoundAndWeightAccess().getWeightAssignment_3(), "rule__BoundAndWeight__WeightAssignment_3");
					put(grammarAccess.getMetricAndWeightAccess().getMetricAssignment_1(), "rule__MetricAndWeight__MetricAssignment_1");
					put(grammarAccess.getMetricAndWeightAccess().getWeightAssignment_3(), "rule__MetricAndWeight__WeightAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.somox.metrics.dsl.ui.contentassist.antlr.internal.InternalMetricDSLParser typedParser = (org.somox.metrics.dsl.ui.contentassist.antlr.internal.InternalMetricDSLParser) parser;
			typedParser.entryRuleMetricModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MetricDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MetricDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
